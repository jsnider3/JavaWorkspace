import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

//Optimal play for Tic Tac Toe can be found in the 832nd XKCD strip.
		
public class TicTacToe {
	JFrame frame;
	JPanel panel;
	boolean player1st;//True means player is X
				   //false means player is O.
				
	static short X=1;
	static short O=-1;
	String userChar;
	String compChar;
	JButton topleft;JButton topmid;JButton topright;
	JButton midleft;JButton midmid;JButton midright;
	JButton lowleft;JButton lowmid;JButton lowright;
	ArrayList<JButton> buttonList;
	TicTacToeBoard t;// = new TicTacToeBoard();
	
	public TicTacToe(TicTacToeBoard board){
		t=board;
		player1st=t.XJustMoved;
		if(player1st){
			userChar="X";
			compChar="O";
		}
		else {
			userChar="O";
			compChar="X";
		}
		frame = new JFrame("Tic Tac Toe");
		panel = new JPanel();
		topleft= new JButton();topmid= new JButton();topright= new JButton();
		midleft= new JButton();midmid= new JButton();midright= new JButton();
		lowleft= new JButton();lowmid= new JButton();lowright= new JButton();
		panel.add(topleft);panel.add(topmid);panel.add(topright);
		panel.add(midleft);panel.add(midmid);panel.add(midright);
		panel.add(lowleft);panel.add(lowmid);panel.add(lowright);
		buttonList = new ArrayList<JButton>();
		buttonList.add(topleft);buttonList.add(topmid);buttonList.add(topright);
		buttonList.add(midleft);buttonList.add(midmid);buttonList.add(midright);
		buttonList.add(lowleft);buttonList.add(lowmid);buttonList.add(lowright);
		panel.setLayout(new GridLayout(3, 3, 0 ,0));
		topleft .addActionListener(new toplLeftListener());
		topmid  .addActionListener(new topMidListener());
		topright.addActionListener(new topRightListener());
		midleft .addActionListener(new midLeftListener());
		midmid  .addActionListener(new midMidListener());
		midright.addActionListener(new midRightListener());
		lowleft .addActionListener(new lowLeftListener());
		lowmid  .addActionListener(new lowMidListener());
		lowright.addActionListener(new lowRightListener());
		frame.add(panel);
		frame.setSize(300,300);
		frame.setLocation(300,300);
		frame.setVisible(true);
		
		if(!player1st){
			compMove();
		}
	}
	
	

	class toplLeftListener implements ActionListener{
		public void actionPerformed(ActionEvent event){
			if(topleft.getText()==""){
				playerMove((short)0);
				compMove();
			}
		}
	}
	
	class topMidListener   implements ActionListener{
		public void actionPerformed(ActionEvent event){
			if(topmid.getText()==""){
				playerMove((short)1);
				compMove();
			}
		}
	}
	
	class topRightListener implements ActionListener{
		public void actionPerformed(ActionEvent event){
			if(topright.getText()==""){
				playerMove((short)2);
				compMove();
			}
		}
	}
	
	class midLeftListener  implements ActionListener{
		public void actionPerformed(ActionEvent event){
			if(midleft.getText()==""){
				playerMove((short)3);
				compMove();
			}
		}
	}
	
	class midMidListener   implements ActionListener{
		public void actionPerformed(ActionEvent event){
			if(midmid.getText()==""){
				playerMove((short)4);
				compMove();
			}
		}
	}
	
	class midRightListener implements ActionListener{
		public void actionPerformed(ActionEvent event){
			if(midright.getText()==""){
				playerMove((short)5);
				compMove();
			}
		}
	}
	
	class lowLeftListener  implements ActionListener{
		public void actionPerformed(ActionEvent event){
			if(lowleft.getText()==""){
				playerMove((short)6);
				compMove();
			}
		}
	}
	
	class lowMidListener   implements ActionListener{
		public void actionPerformed(ActionEvent event){
			if(lowmid.getText()==""){
				playerMove((short)7);
				compMove();
			}
		}
	}
	
	class lowRightListener implements ActionListener{
		public void actionPerformed(ActionEvent event){
			if(lowright.getText()==""){
				playerMove((short)8);
				compMove();
			}
		}
	}
	
	private void playerMove(short s){
		buttonList.get(s).setText(userChar);
		//t= new TicTacToeBoard(t,s);
		t.Move(s);
		/*if(t.isOver()){
			t.printVerbose();
		}*/
	}
	
	private void compMove(){
		short optimalMove = 0;
		//TODO Make optimal move.
		if(t.XJustMoved){
			optimalMove=TicTacToeBoard.min(t.children()).recentMove;
			buttonList.get(optimalMove).setText("X");
		}
		else{
			optimalMove=TicTacToeBoard.max(t.children()).recentMove;
			buttonList.get(optimalMove).setText("O");
		}
		t.Move(optimalMove);
		System.out.println(t);
		//TODO Show Move.
		
	}
	
	//public static void main(String[] args){
		//Optimal play for Tic Tac Toe
		//is from the 832nd XKCD strip
		//TicTacToe game = new TicTacToe(getInput());
	//}
}